{
	"loader": {
		"scope": "javascript",
		"prefix": "ldr",
		"body": [
			"const loader = (() => {",
			"let libName = ''",
			"let moduleName = ''",
			"const load = () => new $1()",
			"return {",
			"libName,",
			"moduleName,",
			"load",
			"}",
			"})()",
		],
		"description": "loader"
	},
	"iife": {
		"scope": "javascript",
		"prefix": "iife",
		"body": [
			"(() => {",
			"    $1",
			"})()",
		],
		"description": "iife"
	},
	"here": {
		"scope": "javascript",
		"prefix": "here",
		"body": [
			"",
			"console.log('\\n▾▾▾▾▾▾▾▾▾▾▾▾▾▾▾▾▾\\n▾▾▾▾▾ HERE !!!!!!\\n\\n')",
			"console.log($1)",
			"console.log('\\n▴▴▴▴▴ HERE !!!!!!\\n▴▴▴▴▴▴▴▴▴▴▴▴▴▴▴▴▴\\n\\n')",
			""
		],
		"description": "here"
	},
	"app": {
		"scope": "javascript",
		"prefix": "app",
		"body": [
			"class App {",
			"\tappName = '$1'",
			"\tmodules = new Map()",
			"\tlibraries = new Map()",
			"\tadaptors = new Map()",
			"\tproxy",
			"\tstore ",
			"\tself",
			"",
			"\tconstructor() {",
			"\t\tthis.self = this ",
			"\t}",
			"",
			"\tasync start() { }",
			"",
			"\tinjectLibraryLoader(loader) {",
			"\t\tconst { libName } = loader",
			"\t\tconsole.log(`[APP] |\\${libName}| Loader Injected`)",
			"\t}",
			"",
			"\tinjectAdaptorLoader(loader) {",
			"\t\tconst { adaptorName } = loader",
			"\t\tconsole.log(`[APP] |\\${adaptorName}| Adaptor Loader Injected`)",
			"\t}",
			"",
			"\tinjectModuleLoader(loader) {",
			"",
			"\t\tconst libraries = ",
			"\t\t\tArray.from(this.libraries.keys())",
			"\t\t\t\t.map(key => this.libraries.get(key))",
			"\t\t\t\t.reduce((acc, library) => {",
			"\t\t\t\t\treturn Object.assign(acc, { ...library })",
			"\t\t\t\t}, {})",
			"",
			"\t\tconst adaptors = ",
			"\t\t\tArray.from(this.adaptors.keys())",
			"\t\t\t\t.map(key => this.adaptors.get(key))",
			"\t\t\t\t.reduce((acc, adaptor) => {",
			"\t\t\t\t\treturn Object.assign(acc, { ...adaptor })",
			"\t\t\t\t}, {})",
			"",
			"\t\tthis.proxy = Object.assign(adaptors, libraries, {}) ",
			"",
			"\t\tconst { moduleName } = loader",
			"\t\tconsole.log(`[APP] |\\${moduleName}| Module Loader Injected`)",
			"\t}",
			"}",
			"",
			"(() => {",
			"\twindow.APP = new App() ",
			"})()"
		],
		"description": "plugin module"
	},
	"plugmod": {
		"scope": "javascript",
		"prefix": "mod",
		"body": [
			"const loader = (() => {",
			"\tlet moduleName = '$1'",
			"",
			"\tconst load = () => new $2()",
			"",
			"\treturn { moduleName, load }",
			"})()",
			"",
			"class $2 {",
			"\tself",
			"\tapp",
			"\twrapper",
			"\tconstructor(app) {",
			"\t\tthis.self = this",
			"\t\tthis.app = app",
			"\t\tthis.wrapper = document.querySelector('$3')",
			"\t}",
			"}",
			"",
			"",
			"(() => {",
			"\tconst app = window.APP",
			"",
			"\tif (app.appName === '$4')  {",
			"\t\tapp.injectModuleLoader(loader)",
			"\t}",
			"})()"
		],
		"description": "plugin module"
	},
	"plugadt": {
		"scope": "javascript",
		"prefix": "adt",
		"body": [
			"const loader = (() => {",
			"\tlet adaptorName = '$1'",
			"",
			"\tconst load = () => {",
			"\t\t//closure: lexical scope",
			"",
			"\t\treturn (() => {",
			"\t\t\t//props (& functions)",
			"",
			"\t\t\treturn {",
			"\t\t\t//exporting props (& functions)",
			"",
			"\t\t\t}",
			"\t\t})",
			"\t}",
			"\treturn { adaptorName, load }",
			"})()",
			"",
			"(() => {",
			"\tconst app = window.APP",
			"",
			"\tif (app.appName === '$2')  {",
			"\t\tapp.injectAdaptorLoader(loader)",
			"\t}",
			"})()"
		],
		"description": "plugin module"
	},
	"pluglib": {
		"scope": "javascript",
		"prefix": "lib",
		"body": [
			"const loader = (() => {",
			"\tlet libName = '$1'",
			"",
			"\tconst load = () => {",
			"\t\t//closure: lexical scope",
			"",
			"\t\treturn (() => {",
			"\t\t\t//props (& functions)",
			"",
			"\t\t\treturn {",
			"\t\t\t//exporting props (& functions)",
			"",
			"\t\t\t}",
			"\t\t})",
			"\t}",
			"\treturn { libName, load }",
			"})()",
			"",
			"(() => {",
			"\tconst app = window.APP",
			"",
			"\tif (app.appName === '$2')  {",
			"\t\tapp.injectLibraryLoader(loader)",
			"\t}",
			"})()"
		],
		"description": "plugin module"
	},
	"plugapi": {
		"scope": "javascript",
		"prefix": "api",
		"body": [
			"const loader = (() => {",
			"\tlet adaptorName = '$1'",
			"",
			"\tconst load = () => {",
			"\t\t//closure: lexical scope",
			"\t\tlet baseUrl = 'http://localhost:$2'",
			"",
			"\t\treturn (() => {",
			"\t\t\t//props (& functions)",
			"\t\t\tconst get = async(path) => await new Promise(res => setTimeout(res, 1000, data))",
			"\t\t\tconst setUrl = async(url) => { baseUrl = url }",
			"",
			"\t\t\t//exporting props (& functions)",
			"\t\t\treturn { get, setUrl }",
			"\t\t})()",
			"\t}",
			"\treturn { adaptorName, load }",
			"})()",
			"",
			"(() => {",
			"\tconst app = window.APP",
			"",
			"\tif (app.appName === '$3')  {",
			"\t\tapp.injectAdaptorLoader(loader)",
			"\t}",
			"})()",
			"",
			"const data = { }"
		],
		"description": "plugin module"
	},
}